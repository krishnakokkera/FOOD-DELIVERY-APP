package com.tap.DAO.imples;

import java.sql.Connection;
import java.sql.Timestamp;
import java.util.Date;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.tap.DAO.OrderDAO;
import com.tap.DbConnection.DBConnection;
import com.tap.MODELS.Order;

public class OrderImpl implements OrderDAO {
	Scanner scan=new Scanner(System.in);

	String INSERT="insert into `order`(`restaurantId`,`userId`,`totalAmount`,`status`,`shippingAddress`,`phoneNumber`,`paymentMode`)values(?,?,?,?,?,?,?)";
	String SELECT="select * from `order` where `orderId`=?";
	String UPDATE="update `order` set  `orderDate`=?,`totalAmount`=?,`status`=?,`shippingAddress`=?,`phoneNumber`=?,`paymentMode`=? where `orderId`=?";
	String DELETE="delete from `order` where `orderId`=?";
	String SELECTALL="select * from `order`";
	// This SQL query gets all the "receipts" for one user from the "order" table.
    String sql = "SELECT * FROM `order` WHERE userId = ? ORDER BY orderDate DESC";
    



	@Override
	public int AddOrder(Order order) {
//		try(Connection con=DBConnection.getConnections();
//				PreparedStatement pstmt=con.prepareStatement(INSERT);){
		
		
    //becuse we want qutogenerated values from the prpared statemets
		int order_id=0;
			try(Connection con=DBConnection.getConnections();
					PreparedStatement pstmt=con.prepareStatement(INSERT,Statement.RETURN_GENERATED_KEYS);){



		
			pstmt.setInt(1,order.getRestaurantId() );
			pstmt.setInt(2, order.getUserId());
			pstmt.setDouble(3,order.getTotalAmount());
			pstmt.setString(4,order.getStatus());
			pstmt.setString(5,order.getShippingAddress());
			pstmt.setString(6,order.getPhoneNumber());
			pstmt.setString(7,order.getPaymentMode());
			int res = pstmt.executeUpdate();
			
	//get the that autogenerated values soo
			if(res>0)
			{
			ResultSet generatedKeys = pstmt.getGeneratedKeys();
		if( generatedKeys.next())
			{
				order_id=generatedKeys.getInt(1);
			System.out.print(res);
			System.out.println("Generated Order ID: " + order_id);

		} 
			}
			}


		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

     return order_id;
	}



	@Override
	public Order GetOrder(int id) {
		// TODO Auto-generated method stub
		Order o=null;
		try(Connection con=DBConnection.getConnections();
				PreparedStatement pstmt=con.prepareStatement(SELECT);){


			pstmt.setInt(1, id);
			ResultSet res = pstmt.executeQuery();
			while(res.next())
			{
				int orderId=res.getInt("orderId");
				int restaurantId=res.getInt("restaurantId");
				int userId=res.getInt("userId");
				//String orderDate=res.getString("orderDate");
				java.time.LocalDateTime orderDate = res.getObject("orderDate", java.time.LocalDateTime.class);

				double totalAmount=res.getDouble("totalAmount");
				String status=res.getString("status");
				String shippingAddress=res.getString("shippingAddress");
				String phoneNumber=res.getString("phoneNumber");
				String paymentMode=res.getString("paymentMode");
				o=new Order(orderId,restaurantId,userId,orderDate,totalAmount,status,shippingAddress,paymentMode,phoneNumber);

			}
		}
		catch (SQLException e) {
			e.printStackTrace();
		}


		return o;

	}

	@Override
	public int Update(Order order) {
		int res=0;
		try(Connection con=DBConnection.getConnections();
				PreparedStatement pstmt=con.prepareStatement(UPDATE);){

			//pstmt.setString(1,order.getOrderDate());
			pstmt.setObject(1, order.getOrderDate());
			pstmt.setDouble(2,order.getTotalAmount());
			pstmt.setString(3,order.getStatus());
			pstmt.setString(4,order.getShippingAddress());
			pstmt.setString(5,order.getPhoneNumber());
			pstmt.setString(6,order.getPaymentMode());
			pstmt.setInt(7,order.getOrderId());
			
			

			res=pstmt.executeUpdate();


		}
		catch (SQLException e) {

			e.printStackTrace();
		}

		return res;
	}

	@Override
	public int Delete(int id) {
		int res=0;
		try(Connection con=DBConnection.getConnections();
				PreparedStatement pstmt=con.prepareStatement(DELETE);){



			pstmt.setInt(1, id);
			res=pstmt.executeUpdate();





		}



		catch (SQLException e) {

			e.printStackTrace();
		}
		return res;
	}

	

	@Override
	public List<Order> GetAll() {
	    List<Order> list = new ArrayList<>();
	    try (Connection con = DBConnection.getConnections();
	         PreparedStatement pstmt = con.prepareStatement(SELECTALL)) {

	        ResultSet res = pstmt.executeQuery();
	        while (res.next()) {
	            int orderId = res.getInt("orderId");
	            int restaurantId = res.getInt("restaurantId");
	            int userId = res.getInt("userId");
	            java.time.LocalDateTime orderDate = res.getObject("orderDate", java.time.LocalDateTime.class);
	            double totalAmount = res.getDouble("totalAmount");
	            String status = res.getString("status");
	            String shippingAddress = res.getString("shippingAddress");
	            String phoneNumber = res.getString("phoneNumber");
	            String paymentMode = res.getString("paymentMode");

	            Order o = new Order(orderId, restaurantId, userId, orderDate, totalAmount,
	                                status, shippingAddress, paymentMode, phoneNumber);
	            list.add(o);
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return list;
	}
	
	
	
	/**
	 * Fetches a list of all past orders placed by a specific user.
	 * This method is used to build the "Order History" page for a user.
	 * 
	 * @param userId The unique ID of the user whose orders we want to find.
	 * @return A List of Order objects, with the most recent orders appearing first. 
	 *         If the user has no orders, it will return an empty list.
	 */
	
	@Override
	public List<Order> getOrdersByUserId(int userId){
	List<Order> orderHistory = new ArrayList<>();
	try (Connection con = DBConnection.getConnections();
	         PreparedStatement ps = con.prepareStatement(sql)) {

	        ps.setInt(1, userId);
	        ResultSet res = ps.executeQuery();

	        while (res.next()) {
	            Order order = new Order();
	            order.setOrderId(res.getInt("orderId"));
	            order.setUserId(res.getInt("userId"));
	            order.setRestaurantId(res.getInt("restaurantId"));
	            order.setTotalAmount(res.getDouble("totalAmount"));
	            order.setStatus(res.getString("status"));
	            order.setShippingAddress(res.getString("shippingAddress"));
	            order.setPhoneNumber(res.getString("phoneNumber"));
	            order.setPaymentMode(res.getString("paymentMode"));

	            // This line reads the date from the database
	            java.time.LocalDateTime orderDate = res.getObject("orderDate", java.time.LocalDateTime.class);

	            // =========================
	            //  THE FIX IS THIS ONE LINE
	            // =========================
	            order.setOrderDate(orderDate);

	            orderHistory.add(order);
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    
	    return orderHistory;
	}



}
